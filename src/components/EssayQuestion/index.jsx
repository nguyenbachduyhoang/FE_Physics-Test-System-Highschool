import React, { useState, useEffect } from 'react';
import { Card, Progress, Alert, Tooltip, Button } from 'antd';
import { CheckCircleOutlined, ExclamationCircleOutlined, InfoCircleOutlined } from '@ant-design/icons';
import './index.scss';
import AdvancedTextEditor from '../uiBasic/AdvancedTextEditor';

const EssayQuestion = ({ 
  question, 
  value, 
  onChange, 
  onValidationChange,
  disabled = false 
}) => {
  const [wordCount, setWordCount] = useState(0);
  const [isValid, setIsValid] = useState(true);
  const [validationMessage, setValidationMessage] = useState('');
  const [analysis, setAnalysis] = useState(null);

  const minWords = question.minWords || 1;
  const maxWords = question.maxWords || 500;
  const keyPoints = question.keyPoints || [];
  const gradingCriteria = question.gradingCriteria || [];

  useEffect(() => {
    if (!value || value.trim() === '') {
      setWordCount(0);
      setIsValid(false);
      setValidationMessage('Vui l√≤ng nh·∫≠p c√¢u tr·∫£ l·ªùi');
      onValidationChange?.(false);
      return;
    }

    const cleanText = value.trim().replace(/[^\w\s√†√°·∫£√£·∫°ƒÉ·∫Ø·∫±·∫≥·∫µ·∫∑√¢·∫•·∫ß·∫©·∫´·∫≠√®√©·∫ª·∫Ω·∫π√™·∫ø·ªÅ·ªÉ·ªÖ·ªá√¨√≠·ªâƒ©·ªã√≤√≥·ªè√µ·ªç√¥·ªë·ªì·ªï·ªó·ªô∆°·ªõ·ªù·ªü·ª°·ª£√π√∫·ªß≈©·ª•∆∞·ª©·ª´·ª≠·ªØ·ª±·ª≥√Ω·ª∑·ªπ·ªµƒëƒê]/g, ' ');
    const words = cleanText.split(/\s+/).filter(word => word.length > 0);
    const count = words.length;
    setWordCount(count);

    let valid = true;
    let message = '';

    if (count < minWords) {
      valid = false;
      message = `C·∫ßn th√™m ${minWords - count} t·ª´ (t·ªëi thi·ªÉu ${minWords} t·ª´)`;
    } else if (count > maxWords) {
      valid = false;
      message = `V∆∞·ª£t qu√° ${count - maxWords} t·ª´ (t·ªëi ƒëa ${maxWords} t·ª´)`;
    } else {
      message = `ƒê·ªô d√†i ph√π h·ª£p (${count}/${maxWords} t·ª´)`;
    }

    setIsValid(valid);
    setValidationMessage(message);
    onValidationChange?.(valid);
  }, [value, minWords, maxWords, onValidationChange]);

  const completionPercentage = Math.min((wordCount / minWords) * 100, 100);

  useEffect(() => {
    if (value && value.length > 50) {
      const sentences = value.split(/[.!?]+/).filter(s => s.trim().length > 0);
      const physicsTerms = [
        'l·ª±c', 'gia t·ªëc', 'v·∫≠n t·ªëc', 'ƒë·ªông l∆∞·ª£ng', 'nƒÉng l∆∞·ª£ng', 'c√¥ng su·∫•t',
        'ƒëi·ªán t√≠ch', 'ƒëi·ªán tr∆∞·ªùng', 't·ª´ tr∆∞·ªùng', 'dao ƒë·ªông', 's√≥ng', '√°nh s√°ng',
        'nhi·ªát ƒë·ªô', 'ƒë·ªãnh lu·∫≠t', 'nguy√™n l√Ω', 'hi·ªán t∆∞·ª£ng', 'c√¥ng th·ª©c'
      ];
      
      const foundTerms = physicsTerms.filter(term => 
        value.toLowerCase().includes(term)
      );

      setAnalysis({
        sentences: sentences.length,
        physicsTerms: foundTerms,
        hasFormula: /[=+\-*/()]/g.test(value),
        hasExample: value.toLowerCase().includes('v√≠ d·ª•') || value.toLowerCase().includes('ch·∫≥ng h·∫°n')
      });
    } else {
      setAnalysis(null);
    }
  }, [value]);

  const getProgressColor = () => {
    if (wordCount < minWords) return '#ff4d4f';
    if (wordCount > maxWords) return '#ff7a45';
    return '#52c41a';
  };

  const getValidationIcon = () => {
    if (!value) return <InfoCircleOutlined style={{ color: '#1890ff' }} />;
    if (!isValid) return <ExclamationCircleOutlined style={{ color: '#ff4d4f' }} />;
    return <CheckCircleOutlined style={{ color: '#52c41a' }} />;
  };

  return (
    <div className="essay-question">
      {/* Header v·ªõi th√¥ng tin c√¢u h·ªèi */}
      <div className="essay-header">
        <h4>C√¢u h·ªèi t·ª± lu·∫≠n</h4>
        <div className="essay-meta">
          <span>ƒê·ªô d√†i: {minWords}-{maxWords} t·ª´</span>
          {question.essayStyle && (
            <span className="essay-style">Ki·ªÉu: {question.essayStyle}</span>
          )}
        </div>
      </div>

      {/* H∆∞·ªõng d·∫´n l√†m b√†i */}
      {(keyPoints.length > 0 || question.gradingRubric) && (
        <Card 
          size="small" 
          title="üí° H∆∞·ªõng d·∫´n l√†m b√†i" 
          className="essay-guidelines"
          collapsible
        >
          {keyPoints.length > 0 && (
            <div className="key-points">
              <p><strong>C√°c ƒëi·ªÉm c·∫ßn ƒë·ªÅ c·∫≠p:</strong></p>
              <ul>
                {keyPoints.map((point, index) => (
                  <li key={index}>{point}</li>
                ))}
              </ul>
            </div>
          )}
          
          {question.gradingRubric && (
            <div className="grading-rubric">
              <p><strong>Ti√™u ch√≠ ch·∫•m ƒëi·ªÉm:</strong></p>
              <div dangerouslySetInnerHTML={{ __html: question.gradingRubric }} />
            </div>
          )}

          {gradingCriteria.length > 0 && (
            <div className="grading-criteria">
              <p><strong>Thang ƒëi·ªÉm chi ti·∫øt:</strong></p>
              {gradingCriteria.map((criteria, index) => (
                <div key={index} className="criteria-item">
                  <strong>{criteria.criteriaName}</strong> ({criteria.maxPoints} ƒëi·ªÉm): {criteria.description}
                </div>
              ))}
            </div>
          )}
        </Card>
      )}

      {/* Advanced Text Editor */}
      <div className="essay-input-container">
        <AdvancedTextEditor
          value={value || ''}
          onChange={onChange}
          placeholder="Nh·∫≠p c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n... H√£y tr√¨nh b√†y m·ªôt c√°ch c√≥ logic, s·ª≠ d·ª•ng thu·∫≠t ng·ªØ khoa h·ªçc ch√≠nh x√°c v√† ƒë∆∞a ra v√≠ d·ª• c·ª• th·ªÉ."
          disabled={disabled}
          minHeight="200px"
        />
        
        {/* Word count v√† progress */}
        <div className="essay-footer">
          <div className="word-count-container">
            <div className="word-count-info">
              {getValidationIcon()}
              <span className={`word-count ${!isValid ? 'word-count--invalid' : ''}`}>
                {validationMessage}
              </span>
            </div>
            
            <Progress
              percent={completionPercentage}
              size="small"
              strokeColor={getProgressColor()}
              showInfo={false}
              style={{ width: 200 }}
            />
          </div>

          {/* Ph√¢n t√≠ch n·ªôi dung */}
          {analysis && (
            <div className="content-analysis">
              <Tooltip title="S·ªë c√¢u trong b√†i vi·∫øt">
                <span className="analysis-item">üìù {analysis.sentences} c√¢u</span>
              </Tooltip>
              
              {analysis.physicsTerms.length > 0 && (
                <Tooltip title={`Thu·∫≠t ng·ªØ v·∫≠t l√Ω: ${analysis.physicsTerms.join(', ')}`}>
                  <span className="analysis-item">üî¨ {analysis.physicsTerms.length} thu·∫≠t ng·ªØ</span>
                </Tooltip>
              )}
              
              {analysis.hasFormula && (
                <Tooltip title="C√≥ s·ª≠ d·ª•ng c√¥ng th·ª©c ho·∫∑c t√≠nh to√°n">
                  <span className="analysis-item">üßÆ C√≥ c√¥ng th·ª©c</span>
                </Tooltip>
              )}
              
              {analysis.hasExample && (
                <Tooltip title="C√≥ ƒë∆∞a ra v√≠ d·ª•">
                  <span className="analysis-item">üí° C√≥ v√≠ d·ª•</span>
                </Tooltip>
              )}
            </div>
          )}
        </div>
      </div>

      {/* Sample answer n·∫øu c√≥ */}
      {question.sampleAnswer && (
        <Card 
          size="small" 
          title="üìñ C√¢u tr·∫£ l·ªùi m·∫´u (ch·ªâ xem sau khi n·ªôp b√†i)" 
          className="sample-answer"
          style={{ marginTop: 16, display: 'none' }} // ·∫®n khi l√†m b√†i
        >
          <div dangerouslySetInnerHTML={{ __html: question.sampleAnswer }} />
        </Card>
      )}
      {/* Tips ƒë·ªÉ vi·∫øt b√†i t·ªët h∆°n */}
      {/* <div className="essay-tips">
        <Alert
          message="üí° M·∫πo vi·∫øt b√†i t·ª± lu·∫≠n hi·ªáu qu·∫£"
          description={
            <ul>
              <li>B·∫Øt ƒë·∫ßu b·∫±ng ƒë·ªãnh nghƒ©a ho·∫∑c ph√°t bi·ªÉu ƒë·ªãnh lu·∫≠t</li>
              <li>Gi·∫£i th√≠ch r√µ r√†ng b·∫±ng l·ªùi v√† c√¥ng th·ª©c</li>
              <li>ƒê∆∞a ra v√≠ d·ª• th·ª±c t·∫ø ho·∫∑c b√†i t·∫≠p minh h·ªça</li>
              <li>K·∫øt lu·∫≠n t√≥m t·∫Øt nh·ªØng ƒëi·ªÉm ch√≠nh</li>
              <li>S·ª≠ d·ª•ng thu·∫≠t ng·ªØ khoa h·ªçc ch√≠nh x√°c</li>
            </ul>
          }
          type="info"
          showIcon
          closable
          style={{ marginTop: 12 }}
        />
      </div> */}
    </div>
  );
};

export default EssayQuestion; 