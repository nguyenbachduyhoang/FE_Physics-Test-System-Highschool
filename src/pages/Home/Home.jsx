/* eslint-disable no-unused-vars */
import React, { useState, useEffect } from "react";
import "./Home.scss";
import { motion, AnimatePresence } from "framer-motion";
import {
  FaRocket,
  FaUsers,
  FaChartLine,
  FaMagic,
  FaLayerGroup,
  FaFileExport,
  FaPlus,
  FaFilter,
  FaChalkboardTeacher,
  FaBookOpen,
} from "react-icons/fa";
import { BsQuestionDiamond, BsClock } from "react-icons/bs";
import Cselect from "../../components/uiBasic/Cselect";
import { Divider, Modal, Switch, Form, InputNumber, Select, Button } from "antd";
import { useNavigate } from "react-router-dom";
import LayoutContent from "../../components/layoutContent";
import { analyticsService, questionBankService, examService } from "../../services";
import toast from "react-hot-toast";
import ParticlesBackground from "../../components/ParticlesBackground";

const mockData = {
  filters: {
    classes: [
      { label: "L·ªõp 10", value: "10" },
      { label: "L·ªõp 11", value: "11" },
      { label: "L·ªõp 12", value: "12" },
    ],
    topics: [
      { label: "C∆° h·ªçc", value: "cohoc" },
      { label: "ƒêi·ªán h·ªçc", value: "dienhoc" },
      { label: "Quang h·ªçc", value: "quanghoc" },
    ],
    levels: [
      { label: "D·ªÖ", value: "easy" },
      { label: "Trung b√¨nh", value: "medium" },
      { label: "Kh√≥", value: "hard" },
    ],
  },
  features: [
    {
      icon: <FaMagic />,
      title: "ü§ñ AI Generation",
      desc: "T·∫°o ƒë·ªÅ thi t·ª± ƒë·ªông b·∫±ng tr√≠ tu·ªá nh√¢n t·∫°o v·ªõi ƒë·ªô ch√≠nh x√°c cao",
    },
    {
      icon: <FaLayerGroup />,
      title: "üß† Smart Exam",
      desc: "ƒê·ªÅ thi th√≠ch ·ª©ng - AI t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh ƒë·ªô kh√≥ theo nƒÉng l·ª±c",
    },
    {
      icon: <FaChartLine />,
      title: "üìä Analytics AI",
      desc: "Ph√¢n t√≠ch chi ti·∫øt k·∫øt qu·∫£ h·ªçc t·∫≠p b·∫±ng machine learning",
    },
    {
      icon: <FaFileExport />,
      title: "‚ö° Real-time",
      desc: "T·∫°o ƒë·ªÅ thi ngay l·∫≠p t·ª©c, kh√¥ng c·∫ßn ch·ªù ƒë·ª£i",
    },
  ],
  recent: [
    {
      icon: <FaRocket />,
      text: "ƒê√£ t·∫°o ƒë·ªÅ thi C∆° h·ªçc - L·ªõp 10 (5 ph√∫t tr∆∞·ªõc)",
    },
    {
      icon: <FaFileExport />,
      text: "ƒê√£ xu·∫•t ƒë·ªÅ thi ƒêi·ªán h·ªçc - L·ªõp 11 (15 ph√∫t tr∆∞·ªõc)",
    },
    {
      icon: <FaMagic />,
      text: "ƒê√£ l∆∞u ƒë·ªÅ thi Quang h·ªçc - L·ªõp 12 (1 gi·ªù tr∆∞·ªõc)",
    },
    {
      icon: <FaUsers />,
      text: "ƒê√£ chia s·∫ª ƒë·ªÅ thi v·ªõi ƒë·ªìng nghi·ªáp (2 gi·ªù tr∆∞·ªõc)",
    },
  ],
};

const fadeInUp = {
  hidden: { opacity: 0, y: 20 },
  visible: { opacity: 1, y: 0 }
};

const Home = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const [dashboardData, setDashboardData] = useState(null);
  const [chapters, setChapters] = useState([]);
  const [filteredChapters, setFilteredChapters] = useState([]);
  const [creatingExam, setCreatingExam] = useState(false);
  const [aiConnectionStatus] = useState(null);
  const [selectedGrade, setSelectedGrade] = useState(null);
  const [recentExams, setRecentExams] = useState([]);
  
  // Filter states for sidebar (will be passed to thiMau page)
  const [filterGrade, setFilterGrade] = useState(null);
  const [filterTopic, setFilterTopic] = useState(null);
  const [filterDifficulty, setFilterDifficulty] = useState(null);
  
  // Dynamic options loaded from API
  const [gradeOptions, setGradeOptions] = useState([]);
  const [topicOptions, setTopicOptions] = useState([]);
  const [difficultyOptions] = useState([
    { value: "easy", label: "D·ªÖ" },
    { value: "medium", label: "Trung b√¨nh" },
    { value: "hard", label: "Kh√≥" }
  ]);
  const navigate = useNavigate();
  const [form] = Form.useForm();
  const [hoveredStat, setHoveredStat] = useState(null);

  // Th·ªùi gian thi options
  const durationOptions = [
    { label: "15 ph√∫t (Ki·ªÉm tra nhanh)", value: 15 },
    { label: "30 ph√∫t (Ki·ªÉm tra ng·∫Øn)", value: 30 },
    { label: "45 ph√∫t (Ki·ªÉm tra 1 ti·∫øt)", value: 45 },
    { label: "60 ph√∫t (Ki·ªÉm tra h·ªçc k·ª≥)", value: 60 },
    { label: "90 ph√∫t (Thi h·ªçc k·ª≥)", value: 90 },
    { label: "120 ph√∫t (Thi t·ªët nghi·ªáp)", value: 120 },
  ];

  // Load real data from APIs
  useEffect(() => {
    loadDashboardData();
    loadChapters();
    loadFilterOptions();
  }, []);

  // Load filter options from chapters API
  const loadFilterOptions = async () => {
    try {
      const chaptersData = await questionBankService.getChapters();
      
      if (chaptersData && chaptersData.length > 0) {
        // Extract unique grades
        const uniqueGrades = [...new Set(chaptersData.map(chapter => chapter.grade))].sort();
        const gradeOpts = uniqueGrades.map(grade => ({
          value: grade,
          label: `L·ªõp ${grade}`
        }));
        setGradeOptions(gradeOpts);

        // Extract unique chapter names as topics
        const uniqueChapters = [...new Set(chaptersData.map(chapter => chapter.chapterName))].sort();
        const topicOpts = uniqueChapters.map(chapterName => ({
          value: chapterName,
          label: chapterName
        }));
        setTopicOptions(topicOpts);

        console.log('üìã Filter options loaded:', { grades: gradeOpts.length, topics: topicOpts.length });
      }
    } catch (error) {
      console.error('‚ùå Error loading filter options:', error);
      // Fallback to default options
      setGradeOptions([
        { value: 10, label: "L·ªõp 10" },
        { value: 11, label: "L·ªõp 11" },
        { value: 12, label: "L·ªõp 12" }
      ]);
      setTopicOptions([
        { value: "C∆° h·ªçc", label: "C∆° h·ªçc" },
        { value: "ƒêi·ªán h·ªçc", label: "ƒêi·ªán h·ªçc" },
        { value: "Quang h·ªçc", label: "Quang h·ªçc" }
      ]);
    }
  };

  const loadDashboardData = async () => {
    try {
      const data = await analyticsService.getDashboard();
      setDashboardData(data);

      // Load recent activities if they exist in dashboard data
      if (data && data.recentActivities && Array.isArray(data.recentActivities)) {
        const formattedActivities = data.recentActivities.map(activity => {
          let icon = <FaRocket />;

          switch (activity.type) {
            case 'exam_created':
              icon = <FaRocket />;
              break;
            case 'question_created':
              icon = <FaMagic />;
              break;
            case 'exam_shared':
              icon = <FaUsers />;
              break;
            case 'exam_exported':
              icon = <FaFileExport />;
              break;
            default:
              icon = <FaChartLine />;
          }

          return {
            id: activity.id,
            icon: icon,
            text: activity.description,
            time: new Date(activity.createdAt).toLocaleString('vi-VN'),
            type: activity.type
          };
        });
        setRecentExams(formattedActivities);
      } else {
        // Load recent activities separately if not in dashboard
        await loadRecentActivities();
      }

      console.log('‚úÖ Dashboard data loaded successfully');
    } catch (error) {
      console.error('Dashboard error:', error);
      toast.error('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu dashboard');
    } finally {
      setLoading(false);
    }
  };

  // Load recent activities separately
  const loadRecentActivities = async () => {
    try {
      const recentActivities = await analyticsService.getRecentActivities(10);

      if (Array.isArray(recentActivities) && recentActivities.length > 0) {
        const formattedActivities = recentActivities.map(activity => {
          let icon = <FaRocket />;

          switch (activity.type) {
            case 'exam_created':
              icon = <FaRocket />;
              break;
            case 'question_created':
              icon = <FaMagic />;
              break;
            case 'exam_shared':
              icon = <FaUsers />;
              break;
            case 'exam_exported':
              icon = <FaFileExport />;
              break;
            default:
              icon = <FaChartLine />;
          }

          return {
            id: activity.id,
            icon: icon,
            text: activity.description,
            time: new Date(activity.createdAt).toLocaleString('vi-VN'),
            type: activity.type
          };
        });

        setRecentExams(formattedActivities);
      } else {
        setRecentExams([]);
      }
    } catch (error) {
      console.error('Error loading recent activities:', error);
      setRecentExams([]);
    }
  };

  // Load chapters from API
  const loadChapters = async () => {
    try {
      const response = await questionBankService.getChapters();
      console.log('API Response:', response);

      if (response?.data?.success) {
        const chaptersData = response.data.data;
        console.log('Chapters data:', chaptersData);
        
        if (Array.isArray(chaptersData) && chaptersData.length > 0) {
          // L∆∞u to√†n b·ªô chapters
          setChapters(chaptersData);
          setFilteredChapters(chaptersData);
          
          // T·∫°o options cho dropdown grade
          const uniqueGrades = [...new Set(chaptersData.map(chapter => chapter.grade))].sort();
          const gradeOpts = uniqueGrades.map(grade => ({
            value: grade,
            label: `L·ªõp ${grade}`
          }));
          setGradeOptions(gradeOpts);
          
          console.log('Grade options:', gradeOpts);
        } else {
          console.warn('No chapters data found');
          toast.error('Kh√¥ng c√≥ d·ªØ li·ªáu ch∆∞∆°ng h·ªçc');
          setChapters([]);
          setFilteredChapters([]);
          setGradeOptions([]);
        }
      } else {
        console.error('API response not successful:', response);
        toast.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch ch∆∞∆°ng h·ªçc');
        setChapters([]);
        setFilteredChapters([]);
        setGradeOptions([]);
      }
    } catch (error) {
      console.error('Error loading chapters:', error);
      toast.error('L·ªói khi t·∫£i danh s√°ch ch∆∞∆°ng h·ªçc');
      setChapters([]);
      setFilteredChapters([]);
      setGradeOptions([]);
    }
  };

  const handleGradeChange = (value) => {
    console.log('Selected grade:', value);
    console.log('Current chapters:', chapters);
    
    setSelectedGrade(value);
    
    // Reset chapter selection
    form.setFieldsValue({ chapterId: undefined });

    if (value) {
      // Filter chapters by selected grade
      const filtered = chapters.filter(chapter => chapter.grade === value);
      console.log('Filtered chapters:', filtered);
      
      if (filtered && filtered.length > 0) {
        setFilteredChapters(filtered);
        console.log(`üéì Found ${filtered.length} chapters for grade ${value}`);
      } else {
        console.warn(`No chapters found for grade ${value}`);
        setFilteredChapters([]);
        toast.error('Kh√¥ng c√≥ ch∆∞∆°ng h·ªçc n√†o cho l·ªõp n√†y');
      }
    } else {
      // If no grade selected, show all chapters
      setFilteredChapters(chapters);
      setSelectedGrade(null);
    }
  };

  // Filter handlers for sidebar (just update state, no API calls)
  const handleFilterGradeChange = (value) => {
    setFilterGrade(value);
    console.log('üîç Filter by grade:', value);
  };

  const handleFilterTopicChange = (value) => {
    setFilterTopic(value);
    console.log('üîç Filter by topic:', value);
  };

  const handleFilterDifficultyChange = (value) => {
    setFilterDifficulty(value);
    console.log('üîç Filter by difficulty:', value);
  };

  // Navigate to thiMau page with filter params
  const handleViewSampleExams = () => {
    const filterParams = new URLSearchParams();
    
    if (filterGrade) filterParams.append('grade', filterGrade);
    if (filterTopic) filterParams.append('topic', filterTopic);
    if (filterDifficulty) filterParams.append('difficulty', filterDifficulty);
    
    const queryString = filterParams.toString();
    const targetUrl = queryString ? `/thiMau?${queryString}` : '/thiMau';
    
    console.log('üîç Navigating to thiMau with filters:', targetUrl);
    navigate(targetUrl);
  };

  const handleCreateAIExam = async () => {
    try {
      const values = await form.validateFields();

      if (!values.chapterId) {
        toast.error('Vui l√≤ng ch·ªçn ch∆∞∆°ng h·ªçc!');
        return;
      }

      if (!values.questionCount || values.questionCount < 5 || values.questionCount > 50) {
        toast.error('S·ªë c√¢u h·ªèi ph·∫£i t·ª´ 5 ƒë·∫øn 50!');
        return;
      }

      if (!values.duration) {
        toast.error('Vui l√≤ng ch·ªçn th·ªùi gian thi!');
        return;
      }

      // Validation cho lo·∫°i c√¢u h·ªèi
      if (!values.includeMultipleChoice && !values.includeEssay) {
        toast.error('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt lo·∫°i c√¢u h·ªèi (Tr·∫Øc nghi·ªám ho·∫∑c T·ª± lu·∫≠n)!');
        return;
      }

      setCreatingExam(true);
      console.log('üöÄ Starting AI exam creation with values:', values);

      if (values.useSmartExam) {
        toast.loading('üß† AI ƒëang t·∫°o ƒë·ªÅ thi th√¥ng minh...', { id: 'smart-generating' });

        // Find selected chapter for naming
        const selectedChapter = chapters.find(c => c.chapterId === values.chapterId);
        const chapterName = selectedChapter ? selectedChapter.chapterName : 'Ch∆∞∆°ng h·ªçc';

        const smartExamCriteria = {
          name: `Smart Exam - ${chapterName} (${new Date().toLocaleDateString('vi-VN')})`,
          description: `ƒê·ªÅ thi th√¥ng minh ƒë∆∞·ª£c t·∫°o b·∫±ng AI cho ${chapterName}`,
          subjectArea: chapterName,
          difficultyLevel: values.difficulty,
          estimatedDuration: values.duration,
          questionCount: values.questionCount,
          chapterId: values.chapterId, 
          includeMultipleChoice: values.includeMultipleChoice,
          includeEssay: values.includeEssay,
          adaptiveLearning: true
        };

        console.log('ü§ñ Creating smart exam with criteria:', smartExamCriteria);
        const smartExam = await examService.generateSmartExam(smartExamCriteria);

        toast.dismiss('smart-generating');

        if (!smartExam || !smartExam.examId) {
          throw new Error('Smart exam generation failed - no exam ID returned');
        }

        toast.success(`üéØ ƒê√£ t·∫°o ƒë·ªÅ thi th√¥ng minh v·ªõi ${smartExam.totalQuestions || values.questionCount} c√¢u h·ªèi!`, {
          duration: 4000
        });

        // Navigate to smart exam
        setIsModalOpen(false);
        form.resetFields();
        setSelectedGrade(null);
        setFilteredChapters(chapters);
        navigate(`/quiz/${smartExam.examId}`);

      } else {
        toast.loading('üìù ƒêang t·∫°o ƒë·ªÅ thi th√¥ng th∆∞·ªùng...', { id: 'regular-generating' });

        const selectedChapter = chapters.find(c => c.chapterId === values.chapterId);
        const chapterName = selectedChapter?.chapterName || 'V·∫≠t l√Ω';

        // S·ª≠ d·ª•ng Exams/generate endpoint thay v√¨ t·∫°o questions ri√™ng l·∫ª
        const examGenerateData = {
          examName: `ƒê·ªÅ thi - ${chapterName} (${new Date().toLocaleDateString('vi-VN')})`,
          description: `ƒê·ªÅ thi ƒë∆∞·ª£c t·∫°o cho ${chapterName}`,
          durationMinutes: values.duration,
          examType: "ai_generated",
          grade: selectedChapter?.grade || 12,
          chapterId: values.chapterId,
          questionCount: values.questionCount || 10,
          difficultyLevel: values.difficulty || "medium",
          includeMultipleChoice: values.includeMultipleChoice !== false,
          includeEssay: values.includeEssay !== false
        };

        console.log('üìù Creating regular exam with data:', examGenerateData);
        const createdExam = await examService.generateExam(examGenerateData);

        toast.dismiss('regular-generating');
        if (!createdExam || !createdExam.examId) {
          throw new Error('Exam generation failed - no exam ID returned');
        }
        toast.success(`üéâ ƒê√£ t·∫°o ƒë·ªÅ thi th√†nh c√¥ng v·ªõi ${createdExam.totalQuestions || values.questionCount} c√¢u h·ªèi!`, {
          duration: 4000
        });

        setIsModalOpen(false);
        form.resetFields();
        setSelectedGrade(null);
        setFilteredChapters(chapters);
        navigate(`/quiz/${createdExam.examId}`);
      }

    } catch (error) {
      console.error('AI Exam Generation error:', error);
      toast.dismiss();
      toast.error('C√≥ l·ªói x·∫£y ra khi t·∫°o ƒë·ªÅ thi. Vui l√≤ng th·ª≠ l·∫°i!');
    } finally {
      setCreatingExam(false);
    }
  };
  return (
    <div className="layout-home">
      <ParticlesBackground />
      <LayoutContent
        layoutType={5}
        content1={
          <>
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.5 }}
            >
              <h3 className="home-sidebar-title">
                <FaFilter className="home-sidebar-icon" />
                L·ªçc ƒë·ªÅ thi
              </h3>
              <div className="home-sidebar-input">
                <Cselect
                  label="Ch·ªçn l·ªõp"
                  options={gradeOptions}
                  prefix={<FaChalkboardTeacher />}
                  onChange={handleFilterGradeChange}
                  value={filterGrade}
                />
              </div>
              <div className="home-sidebar-input">
                <Cselect
                  label="Ch∆∞∆°ng h·ªçc"
                  options={topicOptions}
                  prefix={<FaBookOpen style={{ color: "#2DD4BF" }} />}
                  onChange={handleFilterTopicChange}
                  value={filterTopic}
                />
              </div>
              <div className="home-sidebar-input">
                <Cselect
                  label="ƒê·ªô kh√≥"
                  options={difficultyOptions}
                  prefix={<BsQuestionDiamond />}
                  onChange={handleFilterDifficultyChange}
                  value={filterDifficulty}
                />
              </div>
              <motion.button
                className="home-sidebar-btn"
                onClick={handleViewSampleExams}
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
              >
                Xem ƒë·ªÅ thi m·∫´u
              </motion.button>
              <motion.div 
                className="home-sidebar-recent"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.3 }}
              >
                <h3 className="home-sidebar-recent-title">
                  <BsClock />
                  Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y
                </h3>
                <ul className="home-sidebar-recent-list">
                  {recentExams.map((item, idx) => (
                    <motion.li
                      className="home-sidebar-recent-item"
                      key={idx}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: idx * 0.1 }}
                    >
                      <span className="home-sidebar-recent-icon">
                        {item.icon}
                      </span>
                      <span className="home-sidebar-recent-text">
                        {item.text}
                      </span>
                    </motion.li>
                  ))}
                </ul>
                {(filterGrade || filterTopic || filterDifficulty) && (
                  <motion.button 
                    className="home-sidebar-clear-filter"
                    onClick={() => {
                      setFilterGrade(null);
                      setFilterTopic(null);
                      setFilterDifficulty(null);
                      toast('üîÑ ƒê√£ x√≥a b·ªô l·ªçc', { icon: '‚ÑπÔ∏è' });
                    }}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                  >
                    üóëÔ∏è X√≥a b·ªô l·ªçc
                  </motion.button>
                )}
              </motion.div>
            </motion.div>
          </>
        }
        content2={
          <>
            <motion.div 
              className="home-main-welcome"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6 }}
              whileHover={{ scale: 1.01 }}
            >
              <motion.h1 
                className="home-main-welcome-title"
                whileHover={{ scale: 1.02 }}
              >
                <motion.span
                  animate={{
                    rotate: [0, 5, -5, 0],
                  }}
                  transition={{
                    duration: 2,
                    repeat: Infinity,
                    repeatType: "reverse"
                  }}
                >
                  <FaLayerGroup className="home-main-welcome-icon" />
                </motion.span>
                Ch√†o m·ª´ng ƒë·∫øn v·ªõi{" "}
                <motion.span 
                  className="home-main-welcome-brand"
                  whileHover={{ 
                    scale: 1.1,
                    textShadow: "0 0 8px rgb(102, 126, 234)"
                  }}
                >
                  Phygens
                </motion.span>
              </motion.h1>
              <p className="home-main-welcome-desc">
                ü§ñ T·∫°o ƒë·ªÅ thi b·∫±ng AI th√¥ng minh, nhanh ch√≥ng v√† ch√≠nh x√°c.
                PhyGen s·ª≠ d·ª•ng tr√≠ tu·ªá nh√¢n t·∫°o ƒë·ªÉ t·∫°o ra ƒë·ªÅ thi ph√π h·ª£p v·ªõi m·ªçi m·ª©c ƒë·ªô h·ªçc sinh.
              </p>

              {aiConnectionStatus && (
                <motion.div 
                  className="home-ai-status-badge"
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ delay: 0.3 }}
                >
                  <span className="ai-status-indicator">
                    {aiConnectionStatus.connected ? 'üü¢' : 'üî¥'}
                  </span>
                  <span className="ai-status-text">
                    {aiConnectionStatus.connected ?
                      `${aiConnectionStatus.provider || 'AI'} ƒë√£ s·∫µn s√†ng` :
                      'AI ch∆∞a s·∫µn s√†ng'
                    }
                  </span>
                  {aiConnectionStatus.model && (
                    <span className="ai-status-model">Model: {aiConnectionStatus.model}</span>
                  )}
                </motion.div>
              )}

              <motion.button
                className="home-main-welcome-btn"
                onClick={() => setIsModalOpen(true)}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <FaPlus className="home-main-welcome-btn-icon" />
                T·∫°o ƒë·ªÅ m·ªõi
              </motion.button>
            </motion.div>

            <motion.div 
              className="home-main-stats"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.2 }}
            >
              {[
                {
                  icon: <FaRocket />,
                  value: dashboardData?.totalExams || "0",
                  label: "ƒê·ªÅ thi ƒë√£ t·∫°o"
                },
                {
                  icon: <FaUsers />,
                  value: dashboardData?.totalUsers || "0",
                  label: "Ng∆∞·ªùi d√πng ƒëƒÉng k√Ω"
                },
                {
                  icon: <FaChartLine />,
                  value: dashboardData?.totalQuestions || "0",
                  label: "C√¢u h·ªèi"
                },
                {
                  icon: <FaMagic />,
                  value: dashboardData?.totalChapters || chapters.length || "0",
                  label: "Ch∆∞∆°ng h·ªçc"
                }
              ].map((stat, idx) => (
                <motion.div
                  key={idx}
                  className="home-main-stat-box"
                  variants={fadeInUp}
                  initial="hidden"
                  animate="visible"
                  transition={{ delay: 0.1 * idx }}
                  whileHover={{ 
                    y: -5,
                    scale: 1.02,
                    transition: { duration: 0.2 }
                  }}
                  onHoverStart={() => setHoveredStat(idx)}
                  onHoverEnd={() => setHoveredStat(null)}
                >
                  <motion.div 
                    className="home-main-stat-icon"
                    animate={hoveredStat === idx ? {
                      scale: [1, 1.2, 1],
                      rotate: [0, 10, -10, 0],
                    } : {}}
                    transition={{
                      duration: 0.5,
                      ease: "easeInOut"
                    }}
                  >
                    {stat.icon}
                  </motion.div>
                  <motion.h3 
                    className="home-main-stat-value"
                    animate={hoveredStat === idx ? {
                      scale: [1, 1.1, 1],
                    } : {}}
                    transition={{ duration: 0.3 }}
                  >
                    {stat.value}+
                  </motion.h3>
                  <p className="home-main-stat-label">{stat.label}</p>
                </motion.div>
              ))}
            </motion.div>

            <motion.h3 
              className="home-main-feature-title"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.4 }}
            >
              <FaMagic className="home-main-feature-icon" />
              T√≠nh nƒÉng n·ªïi b·∫≠t
            </motion.h3>

            <motion.div 
              className="home-main-features"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.5 }}
            >
              {mockData.features.map((feature, idx) => (
                <motion.div
                  className="home-main-feature-box"
                  key={idx}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.1 * idx }}
                  whileHover={{ 
                    y: -5,
                    boxShadow: "0 10px 20px rgba(0,0,0,0.15)",
                    transition: { duration: 0.2 }
                  }}
                >
                  <motion.div 
                    className="home-main-feature-box-icon"
                    whileHover={{
                      rotate: [0, 10, -10, 0],
                      transition: {
                        duration: 0.5,
                        repeat: Infinity,
                        repeatType: "reverse"
                      }
                    }}
                  >
                    {feature.icon}
                  </motion.div>
                  <h4 className="home-main-feature-box-title">
                    {feature.title}
                  </h4>
                  <p className="home-main-feature-box-desc">{feature.desc}</p>
                </motion.div>
              ))}
            </motion.div>
          </>
        }
      />
      <AnimatePresence>
        {isModalOpen && (
          <Modal
            open={isModalOpen}
            onCancel={() => {
              setIsModalOpen(false);
              form.resetFields();
              setSelectedGrade(null);
              setFilteredChapters(chapters);
            }}
            footer={null}
            centered
            className="custom-create-exam-modal"
            closeIcon={<span style={{ color: "#fff", fontSize: 30 }}>&times;</span>}
            width={600}
          >
            <div>
              <h2 className="modal-title">ü§ñ T·∫°o ƒë·ªÅ thi b·∫±ng AI</h2>
              <p style={{ color: '#fff', marginBottom: '20px', textAlign: 'center' }}>
                PhyGen s·ª≠ d·ª•ng AI ƒë·ªÉ t·∫°o ƒë·ªÅ thi ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n
              </p>

              <Form form={form} layout="vertical">
                {/* Ch·ªçn l·ªõp tr∆∞·ªõc */}
                <Form.Item
                  name="grade"
                  label={<span style={{ color: '#fff' }}>Ch·ªçn l·ªõp</span>}
                  rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn l·ªõp!' }]}
                >
                  <Select
                    placeholder="Ch·ªçn l·ªõp h·ªçc"
                    onChange={handleGradeChange}
                    allowClear
                  >
                    {gradeOptions.map(grade => (
                      <Select.Option key={grade.value} value={grade.value}>
                        {grade.label}
                      </Select.Option>
                    ))}
                  </Select>
                </Form.Item>

                <Form.Item
                  name="chapterId"
                  label={<span style={{ color: '#fff' }}>Ch∆∞∆°ng h·ªçc</span>}
                  rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ch∆∞∆°ng h·ªçc!' }]}
                >
                  <Select
                    placeholder={selectedGrade ? "Ch·ªçn ch∆∞∆°ng h·ªçc" : "Vui l√≤ng ch·ªçn l·ªõp tr∆∞·ªõc"}
                    disabled={!selectedGrade}
                    loading={chapters.length === 0}
                    allowClear
                  >
                    {Array.isArray(filteredChapters) ? filteredChapters.map(chapter => (
                      <Select.Option key={chapter.chapterId} value={chapter.chapterId}>
                        {chapter.chapterName}
                      </Select.Option>
                    )) : []}
                  </Select>
                </Form.Item>

                <Form.Item
                  name="difficulty"
                  label={<span style={{ color: '#fff' }}>ƒê·ªô kh√≥</span>}
                  initialValue="medium"
                  rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ƒë·ªô kh√≥!' }]}
                >
                  <Select placeholder="Ch·ªçn ƒë·ªô kh√≥">
                    <Select.Option value="easy">üü¢ D·ªÖ</Select.Option>
                    <Select.Option value="medium">üü° Trung b√¨nh</Select.Option>
                    <Select.Option value="hard">üî¥ Kh√≥</Select.Option>
                  </Select>
                </Form.Item>

                <Form.Item
                  name="questionCount"
                  label={<span style={{ color: '#fff' }}>S·ªë l∆∞·ª£ng c√¢u h·ªèi</span>}
                  initialValue={10}
                  rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë c√¢u h·ªèi!' }]}
                >
                  <InputNumber min={5} max={50} style={{ width: '100%' }} placeholder="Nh·∫≠p s·ªë c√¢u h·ªèi (5-50)" />
                </Form.Item>

                {/* Th·ªùi gian thi d·∫°ng dropdown */}
                <Form.Item
                  name="duration"
                  label={<span style={{ color: '#fff' }}>Th·ªùi gian thi</span>}
                  initialValue={45}
                  rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn th·ªùi gian!' }]}
                >
                  <Select placeholder="Ch·ªçn th·ªùi gian thi">
                    {durationOptions.map(option => (
                      <Select.Option key={option.value} value={option.value}>
                        {option.label}
                      </Select.Option>
                    ))}
                  </Select>
                </Form.Item>

                <Divider style={{ background: "white", margin: "16px 0" }} />

                <div style={{ marginBottom: "16px" }}>
                  <span style={{ color: '#fff', fontSize: '14px', fontWeight: 'bold' }}>üìù Lo·∫°i c√¢u h·ªèi:</span>
                </div>

                <Form.Item name="includeMultipleChoice" valuePropName="checked" initialValue={true}>
                  <div className="modal-switch-row">
                    <span className="modal-label">
                      üîò Tr·∫Øc nghi·ªám
                      <br />
                      <small style={{ opacity: 0.8 }}>C√¢u h·ªèi 4 l·ª±a ch·ªçn A, B, C, D</small>
                    </span>
                    <Switch defaultChecked />
                  </div>
                </Form.Item>

                <Form.Item name="includeEssay" valuePropName="checked" initialValue={false}>
                  <div className="modal-switch-row">
                    <span className="modal-label">
                      ‚úçÔ∏è T·ª± lu·∫≠n
                      <br />
                      <small style={{ opacity: 0.8 }}>C√¢u h·ªèi y√™u c·∫ßu tr√¨nh b√†y, gi·∫£i th√≠ch chi ti·∫øt</small>
                    </span>
                    <Switch />
                  </div>
                </Form.Item>

                <Divider style={{ background: "white", margin: "16px 0" }} />


              </Form>

              <div className="modal-btn-row">
                <Button
                  className="modal-btn"
                  type="primary"
                  size="large"
                  loading={creatingExam}
                  onClick={handleCreateAIExam}
                  style={{
                    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                    border: 'none',
                    height: '50px',
                    fontSize: '16px',
                    fontWeight: 'bold'
                  }}
                >
                  {creatingExam ? (
                    <>ü§ñ AI ƒëang t·∫°o ƒë·ªÅ thi...</>
                  ) : (
                    <>üöÄ T·∫°o ƒë·ªÅ thi b·∫±ng AI</>
                  )}
                </Button>
              </div>
            </div>
          </Modal>
        )}
      </AnimatePresence>
    </div>
  );
};

export default Home;
