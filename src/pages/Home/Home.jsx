import React, { useState, useEffect } from "react";
import "./Home.scss";
import {
  FaRocket,
  FaUsers,
  FaChartLine,
  FaMagic,
  FaLayerGroup,
  FaFileExport,
  FaPlus,
  FaFilter,
  FaChalkboardTeacher,
  FaBookOpen,
} from "react-icons/fa";
import { BsQuestionDiamond, BsClock } from "react-icons/bs";
import Cselect from "../../components/uiBasic/Cselect";
import { Divider, Modal, Switch, Spin, Form, InputNumber, Select, Button } from "antd";
import { useNavigate } from "react-router-dom";
import LayoutContent from "../../components/layoutContent";
import { analyticsService, questionBankService, examService } from "../../services";
import toast from "react-hot-toast";

const mockData = {
  filters: {
    classes: [
      { label: "L·ªõp 10", value: "10" },
      { label: "L·ªõp 11", value: "11" },
      { label: "L·ªõp 12", value: "12" },
    ],
    topics: [
      { label: "C∆° h·ªçc", value: "cohoc" },
      { label: "ƒêi·ªán h·ªçc", value: "dienhoc" },
      { label: "Quang h·ªçc", value: "quanghoc" },
    ],
    levels: [
      { label: "D·ªÖ", value: "easy" },
      { label: "Trung b√¨nh", value: "medium" },
      { label: "Kh√≥", value: "hard" },
    ],
  },
  stats: [
    { icon: <FaRocket />, value: "14,700+", label: "ƒê·ªÅ thi ƒë√£ t·∫°o" },
    { icon: <FaUsers />, value: "2,450+", label: "Gi√°o vi√™n tin d√πng" },
    { icon: <FaChartLine />, value: "97%", label: "ƒê·ªô ch√≠nh x√°c AI" },
  ],
  features: [
    {
      icon: <FaMagic />,
      title: "ü§ñ AI Generation",
      desc: "T·∫°o ƒë·ªÅ thi t·ª± ƒë·ªông b·∫±ng tr√≠ tu·ªá nh√¢n t·∫°o v·ªõi ƒë·ªô ch√≠nh x√°c cao",
    },
    {
      icon: <FaLayerGroup />,
      title: "üß† Smart Exam",
      desc: "ƒê·ªÅ thi th√≠ch ·ª©ng - AI t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh ƒë·ªô kh√≥ theo nƒÉng l·ª±c",
    },
    {
      icon: <FaChartLine />,
      title: "üìä Analytics AI",
      desc: "Ph√¢n t√≠ch chi ti·∫øt k·∫øt qu·∫£ h·ªçc t·∫≠p b·∫±ng machine learning",
    },
    {
      icon: <FaFileExport />,
      title: "‚ö° Real-time",
      desc: "T·∫°o ƒë·ªÅ thi ngay l·∫≠p t·ª©c, kh√¥ng c·∫ßn ch·ªù ƒë·ª£i",
    },
  ],
  recent: [
    {
      icon: <FaRocket />,
      text: "ƒê√£ t·∫°o ƒë·ªÅ thi C∆° h·ªçc - L·ªõp 10 (5 ph√∫t tr∆∞·ªõc)",
    },
    {
      icon: <FaFileExport />,
      text: "ƒê√£ xu·∫•t ƒë·ªÅ thi ƒêi·ªán h·ªçc - L·ªõp 11 (15 ph√∫t tr∆∞·ªõc)",
    },
    {
      icon: <FaMagic />,
      text: "ƒê√£ l∆∞u ƒë·ªÅ thi Quang h·ªçc - L·ªõp 12 (1 gi·ªù tr∆∞·ªõc)",
    },
    {
      icon: <FaUsers />,
      text: "ƒê√£ chia s·∫ª ƒë·ªÅ thi v·ªõi ƒë·ªìng nghi·ªáp (2 gi·ªù tr∆∞·ªõc)",
    },
  ],
};

const Home = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const [dashboardData, setDashboardData] = useState(null);
  const [chapters, setChapters] = useState([]);
  const [creatingExam, setCreatingExam] = useState(false);
  const [aiConnectionStatus, setAiConnectionStatus] = useState(null);
  const navigate = useNavigate();
  const [form] = Form.useForm();

  // Load real data from APIs
  useEffect(() => {
    loadDashboardData();
    loadChapters();
    testAIConnection();
  }, []);

  const loadDashboardData = async () => {
    try {
      const data = await analyticsService.getDashboard();
      setDashboardData(data);
    } catch (error) {
      console.error('Dashboard error:', error);
      toast.error('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu dashboard');
    } finally {
      setLoading(false);
    }
  };

  const loadChapters = async () => {
    try {
      console.log('üîÑ Loading chapters from API...');
      const chaptersData = await questionBankService.getChapters();
      
      console.log('üì¶ Raw chapters response:', chaptersData);
      
      // Debug response structure
      if (chaptersData && chaptersData.length > 0) {
        setChapters(chaptersData);
        console.log('‚úÖ Loaded', chaptersData.length, 'chapters from API');
        toast.success(`üìö ƒê√£ t·∫£i ${chaptersData.length} ch∆∞∆°ng h·ªçc`);
      } else {
        console.warn('‚ö†Ô∏è Empty chapters response:', chaptersData);
        setChapters([]);
        toast.warning('Ch∆∞a c√≥ d·ªØ li·ªáu ch∆∞∆°ng h·ªçc. Vui l√≤ng ki·ªÉm tra backend API.');
      }
    } catch (error) {
      console.error('‚ùå Chapters API error:', error);
      console.error('‚ùå Error details:', error.response?.data || error.message);
      setChapters([]);
      toast.error(`Kh√¥ng th·ªÉ t·∫£i danh s√°ch ch∆∞∆°ng h·ªçc: ${error.message}`);
    }
  };

  const testAIConnection = async () => {
    try {
      const connectionTest = await questionBankService.testAIConnection();
      setAiConnectionStatus(connectionTest);
      
      if (connectionTest.success) {
        toast.success('ü§ñ AI ƒë√£ s·∫µn s√†ng!', { duration: 2000 });
      } else {
        toast.error('‚ö†Ô∏è AI ch∆∞a s·∫µn s√†ng, ch·ªâ s·ª≠ d·ª•ng ƒë·ªÅ m·∫´u', { duration: 3000 });
      }
    } catch (error) {
      console.error('AI connection test error:', error);
      setAiConnectionStatus({ success: false, connected: false });
      toast.error('‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi AI', { duration: 3000 });
    }
  };

  // Handle AI Exam Generation
  const handleCreateAIExam = async () => {
    try {
      const values = await form.validateFields();
      setCreatingExam(true);

      // Check if user wants Smart Exam (adaptive) or Regular AI Exam
      if (values.useSmartExam) {
        // Smart Exam Generation - Uses AI to create adaptive exam
        toast.loading('üß† AI ƒëang t·∫°o ƒë·ªÅ thi th√¥ng minh...', { id: 'smart-generating' });

        // Find selected chapter for naming
        const selectedChapter = chapters.find(c => c.chapterId === values.chapterId);
        const chapterName = selectedChapter ? selectedChapter.chapterName : 'Ch∆∞∆°ng h·ªçc';

        const smartExamCriteria = {
          name: `Smart Exam - ${chapterName} (${new Date().toLocaleDateString('vi-VN')})`,
          description: `ƒê·ªÅ thi th√¥ng minh ƒë∆∞·ª£c t·∫°o b·∫±ng AI cho ${chapterName}`,
          subjectArea: chapterName,
          difficultyLevel: values.difficulty,
          estimatedDuration: values.duration,
          questionCount: values.questionCount,
          includeMultipleChoice: values.includeMultipleChoice,
          includeEssay: values.includeEssay,
          adaptiveLearning: true
        };

        const smartExam = await examService.generateSmartExam(smartExamCriteria);
        
        toast.dismiss('smart-generating');
        toast.success(`üéØ ƒê√£ t·∫°o ƒë·ªÅ thi th√¥ng minh v·ªõi ${smartExam.totalQuestions} c√¢u h·ªèi!`, {
          duration: 4000
        });

        // Navigate to smart exam
        setIsModalOpen(false);
        form.resetFields();
        navigate(`/quiz/${smartExam.examId}`);

      } else {
        // Regular AI Question Generation
        const selectedChapter = chapters.find(c => c.chapterId === values.chapterId);
        const questionCriteria = {
          chapterId: values.chapterId,
          difficultyLevel: values.difficulty || "medium",
          questionType: values.includeMultipleChoice ? "multiple_choice" : "essay",
          specificTopic: selectedChapter?.chapterName || "V·∫≠t l√Ω",
          saveToDatabase: true  // ‚úÖ PH·∫¢I TRUE ƒë·ªÉ l∆∞u questions v√†o database
        };

        // Generate questions using AI with rate limit protection
        const generatedQuestions = [];
        const questionCount = values.questionCount || 5; // Reduced default to avoid rate limits
        
        // Add progress toast
        toast.loading(`ü§ñ ƒêang t·∫°o c√¢u h·ªèi 1/${questionCount}...`, { id: 'ai-progress' });
        
        for (let i = 0; i < questionCount; i++) {
          try {
            // Update progress
            toast.loading(`ü§ñ ƒêang t·∫°o c√¢u h·ªèi ${i + 1}/${questionCount}...`, { id: 'ai-progress' });
            
            const question = await questionBankService.generateQuestion(questionCriteria);
            if (question && question.questionId) {
              generatedQuestions.push(question);
              console.log(`‚úÖ Generated question ${i + 1}/${questionCount}: ${question.questionId}`);
            } else {
              console.warn(`‚ö†Ô∏è Invalid question generated at index ${i + 1}`);
            }
            
            // Add delay to avoid rate limiting (4 seconds = 15 requests per minute max)
            if (i < questionCount - 1) {
              toast.loading(`‚è≥ Ch·ªù ${4} gi√¢y ƒë·ªÉ tr√°nh rate limit...`, { id: 'ai-progress' });
              await new Promise(resolve => setTimeout(resolve, 4000));
            }
            
          } catch (err) {
            console.error(`‚ùå Error generating question ${i + 1}:`, err);
            
            // Check if it's rate limit error
            if (err.message.includes('429') || err.message.includes('Too Many Requests')) {
              toast.error(`‚ö†Ô∏è API rate limited. ƒê·ª£i 60 gi√¢y r·ªìi th·ª≠ l·∫°i...`, { duration: 5000 });
              await new Promise(resolve => setTimeout(resolve, 60000)); // Wait 1 minute
              i--; // Retry this question
            }
            // Ti·∫øp t·ª•c t·∫°o c√°c c√¢u h·ªèi kh√°c thay v√¨ d·ª´ng l·∫°i
          }
        }
        
        toast.dismiss('ai-progress');

        if (generatedQuestions.length === 0) {
          throw new Error('Kh√¥ng th·ªÉ t·∫°o c√¢u h·ªèi n√†o b·∫±ng AI. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ki·ªÉm tra k·∫øt n·ªëi AI.');
        }

        console.log(`üéØ Successfully generated ${generatedQuestions.length}/${questionCount} questions`);

        toast.dismiss('ai-generating');
        toast.loading('üìù ƒêang t·∫°o ƒë·ªÅ thi...', { id: 'exam-creating' });

        // Step 2: Create Exam with Generated Questions
        const chapterName = selectedChapter?.chapterName || 'V·∫≠t l√Ω';
        const examData = {
          examName: `ƒê·ªÅ thi AI - ${chapterName} (${new Date().toLocaleDateString('vi-VN')})`,
          description: `ƒê·ªÅ thi ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·∫±ng AI v·ªõi ${generatedQuestions.length} c√¢u h·ªèi`,
          durationMinutes: values.duration || 45,
          examType: "ai_generated",
          createdBy: "ai_system",  // ‚úÖ S·ª≠ d·ª•ng ai_system user ƒë√£ t·∫°o trong database
          questions: generatedQuestions.map((q, index) => ({
            questionId: q.questionId,
            questionOrder: index + 1,
            pointsWeight: 1.0
          }))
        };

        const createdExam = await examService.createExam(examData);

        toast.dismiss('exam-creating');
        toast.success(`üéâ ƒê√£ t·∫°o ƒë·ªÅ thi AI th√†nh c√¥ng v·ªõi ${generatedQuestions.length} c√¢u h·ªèi!`, {
          duration: 4000
        });

        // Close modal and navigate to the created exam
        setIsModalOpen(false);
        form.resetFields();
        navigate(`/quiz/${createdExam.examId}`);
      }

    } catch (error) {
      console.error('AI Exam Generation error:', error);
      toast.dismiss();
      const errorMessage = examService.formatError(error);
      toast.error(`‚ùå L·ªói t·∫°o ƒë·ªÅ thi AI: ${errorMessage}`, { duration: 5000 });
    } finally {
      setCreatingExam(false);
    }
  };
  return (
    <div className="layout-home">
      <LayoutContent
        layoutType={5}
        content1={
          <>
            <h3 className="home-sidebar-title">
              <FaFilter className="home-sidebar-icon" />
              L·ªçc ƒë·ªÅ thi
            </h3>
            <div className="home-sidebar-input">
              <Cselect
                label="Ch·ªçn l·ªõp"
                options={mockData.filters.classes}
                prefix={<FaChalkboardTeacher />}
              />
            </div>
            <div className="home-sidebar-input">
              <Cselect
                label="Ch·ªß ƒë·ªÅ"
                options={mockData.filters.topics}
                prefix={<FaBookOpen style={{ color: "#2DD4BF" }} />}
              />
            </div>
            <div className="home-sidebar-input">
              <Cselect
                label="ƒê·ªô kh√≥"
                options={mockData.filters.levels}
                prefix={<BsQuestionDiamond />}
              />
            </div>
            <button
              className="home-sidebar-btn"
              onClick={() => navigate("/thiMau")}
            >
              Xem ƒë·ªÅ thi m·∫´u
            </button>
            <div className="home-sidebar-recent">
              <h3 className="home-sidebar-recent-title">
                <BsClock />
                Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y
              </h3>
              <ul className="home-sidebar-recent-list">
                {mockData.recent.map((item, idx) => (
                  <li className="home-sidebar-recent-item" key={idx}>
                    <span className="home-sidebar-recent-icon">
                      {item.icon}
                    </span>
                    <span className="home-sidebar-recent-text">
                      {item.text}
                    </span>
                  </li>
                ))}
              </ul>
            </div>
          </>
        }
        content2={
          <>
            <div className="home-main-welcome">
              <h1 className="home-main-welcome-title">
                <FaLayerGroup className="home-main-welcome-icon" />
                Ch√†o m·ª´ng ƒë·∫øn v·ªõi{" "}
                <span className="home-main-welcome-brand">Phygens</span>
              </h1>
              <p className="home-main-welcome-desc">
                ü§ñ T·∫°o ƒë·ªÅ thi b·∫±ng AI th√¥ng minh, nhanh ch√≥ng v√† ch√≠nh x√°c. 
                PhyGen s·ª≠ d·ª•ng tr√≠ tu·ªá nh√¢n t·∫°o ƒë·ªÉ t·∫°o ra ƒë·ªÅ thi ph√π h·ª£p v·ªõi m·ªçi m·ª©c ƒë·ªô h·ªçc sinh.
              </p>
              
              {/* AI Status Badge */}
              {aiConnectionStatus && (
                <div className="home-ai-status-badge">
                  <span className="ai-status-indicator">
                    {aiConnectionStatus.connected ? 'üü¢' : 'üî¥'}
                  </span>
                  <span className="ai-status-text">
                    {aiConnectionStatus.connected ? 
                      `${aiConnectionStatus.provider || 'AI'} ƒë√£ s·∫µn s√†ng` : 
                      'AI ch∆∞a s·∫µn s√†ng'
                    }
                  </span>
                  {aiConnectionStatus.model && (
                    <span className="ai-status-model">Model: {aiConnectionStatus.model}</span>
                  )}
                </div>
              )}
              
                             {/* AI Achievements */}
               <div className="home-ai-achievements">
                 <div className="achievement-item">
                   <span className="achievement-icon">‚ö°</span>
                   <span className="achievement-text">T·∫°o c√¢u h·ªèi trong 2-3 gi√¢y</span>
                 </div>
                 <div className="achievement-item">
                   <span className="achievement-icon">üéØ</span>
                   <span className="achievement-text">ƒê·ªô ch√≠nh x√°c 97%</span>
                 </div>
                 <div className="achievement-item">
                   <span className="achievement-icon">üöÄ</span>
                   <span className="achievement-text">{chapters.length}+ ch∆∞∆°ng h·ªçc ƒë∆∞·ª£c h·ªó tr·ª£</span>
                 </div>
               </div>
              <button
                className="home-main-welcome-btn"
                onClick={() => setIsModalOpen(true)}
              >
                <FaPlus className="home-main-welcome-btn-icon" />
                T·∫°o ƒë·ªÅ m·ªõi
              </button>
            </div>
            <div className="home-main-stats">
              {loading ? (
                <Spin size="large" />
              ) : (
                <>
                  <div className="home-main-stat-box">
                    <div className="home-main-stat-icon"><FaRocket /></div>
                    <h3 className="home-main-stat-value">{dashboardData?.totalExams || "0"}+</h3>
                    <p className="home-main-stat-label">ƒê·ªÅ thi ƒë√£ t·∫°o</p>
                  </div>
                  <div className="home-main-stat-box">
                    <div className="home-main-stat-icon"><FaUsers /></div>
                    <h3 className="home-main-stat-value">{dashboardData?.totalUsers || "0"}+</h3>
                    <p className="home-main-stat-label">Ng∆∞·ªùi d√πng ƒëƒÉng k√Ω</p>
                  </div>
                  <div className="home-main-stat-box">
                    <div className="home-main-stat-icon"><FaChartLine /></div>
                    <h3 className="home-main-stat-value">{chapters.length || "0"}</h3>
                    <p className="home-main-stat-label">Ch∆∞∆°ng h·ªçc</p>
                  </div>
                </>
              )}
            </div>
            <h3 className="home-main-feature-title">
              <FaMagic className="home-main-feature-icon" />
              T√≠nh nƒÉng n·ªïi b·∫≠t
            </h3>
            <div className="home-main-features">
              {mockData.features.map((feature, idx) => (
                <div className="home-main-feature-box" key={idx}>
                  <div className="home-main-feature-box-icon">
                    {feature.icon}
                  </div>
                  <h4 className="home-main-feature-box-title">
                    {feature.title}
                  </h4>
                  <p className="home-main-feature-box-desc">{feature.desc}</p>
                </div>
              ))}
            </div>
          </>
        }
      />

      {/* AI Test Connection Status */}
      {loading && (
        <div style={{ 
          position: 'fixed', 
          top: '20px', 
          right: '20px', 
          background: '#1890ff', 
          color: '#fff', 
          padding: '12px 20px', 
          borderRadius: '6px',
          zIndex: 1000,
          boxShadow: '0 4px 12px rgba(0,0,0,0.15)'
        }}>
          ü§ñ ƒêang ki·ªÉm tra k·∫øt n·ªëi AI...
        </div>
      )}

      <Modal
        open={isModalOpen}
        onCancel={() => {
          setIsModalOpen(false);
          form.resetFields();
        }}
        footer={null}
        centered
        className="custom-create-exam-modal"
        closeIcon={<span style={{ color: "#fff", fontSize: 30 }}>&times;</span>}
        width={600}
      >
        <div>
          <h2 className="modal-title">ü§ñ T·∫°o ƒë·ªÅ thi b·∫±ng AI</h2>
          <p style={{ color: '#fff', marginBottom: '20px', textAlign: 'center' }}>
            PhyGen s·ª≠ d·ª•ng AI ƒë·ªÉ t·∫°o ƒë·ªÅ thi ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n
          </p>
          
          <Form form={form} layout="vertical">
            <Form.Item
              name="chapterId"
              label={<span style={{ color: '#fff' }}>Ch∆∞∆°ng h·ªçc</span>}
              // rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ch∆∞∆°ng h·ªçc!' }]}
            >
              <Select placeholder="Ch·ªçn ch∆∞∆°ng h·ªçc" loading={chapters.length === 0}>
                {Array.isArray(chapters) ? chapters.map(chapter => (
                  <Select.Option key={chapter.chapterId} value={chapter.chapterId}>
                    L·ªõp {chapter.grade} - {chapter.chapterName}
                  </Select.Option>
                )) : []}
              </Select>
            </Form.Item>

            <Form.Item
              name="questionCount"
              label={<span style={{ color: '#fff' }}>C√¢u h·ªèi (t·ªëi ƒëa 15)</span>}
              initialValue={5}
              rules={[
                { required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë c√¢u h·ªèi!' },
                { type: 'number', min: 1, max: 15, message: 'S·ªë c√¢u h·ªèi t·ª´ 1-15 (gi·ªõi h·∫°n API)!' }
              ]}
              extra={<span style={{ color: '#ffeb3b', fontSize: '12px' }}>
                ‚ö†Ô∏è Gi·ªõi h·∫°n 15 c√¢u/ph√∫t do API rate limit. Nhi·ªÅu h∆°n s·∫Ω m·∫•t th·ªùi gian ch·ªù.
              </span>}
            >
              <InputNumber min={1} max={15} style={{ width: '100%' }} />
            </Form.Item>

            <Form.Item
              name="difficulty"
              label={<span style={{ color: '#fff' }}>ƒê·ªô kh√≥</span>}
              initialValue="medium"
              rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ƒë·ªô kh√≥!' }]}
            >
              <Select placeholder="Ch·ªçn ƒë·ªô kh√≥">
                <Select.Option value="easy">D·ªÖ</Select.Option>
                <Select.Option value="medium">Trung b√¨nh</Select.Option>
                <Select.Option value="hard">Kh√≥</Select.Option>
              </Select>
            </Form.Item>

                         <Form.Item
               name="duration"
               label={<span style={{ color: '#fff' }}>Th·ªùi gian (ph√∫t)</span>}
               initialValue={45}
             >
               <InputNumber min={15} max={180} style={{ width: '100%' }} />
             </Form.Item>

             <Divider style={{ background: "white", margin: "16px 0" }} />
             
             <Form.Item name="useSmartExam" valuePropName="checked" initialValue={false}>
               <div className="modal-switch-row">
                 <span className="modal-label">
                   üß† Smart Exam (AI th√≠ch ·ª©ng)
                   <br />
                   <small style={{ opacity: 0.8 }}>T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh ƒë·ªô kh√≥ theo nƒÉng l·ª±c</small>
                 </span>
                 <Switch />
               </div>
             </Form.Item>
            
            <Form.Item name="includeEssay" valuePropName="checked" initialValue={true}>
              <div className="modal-switch-row">
                <span className="modal-label">T·ª± lu·∫≠n</span>
                <Switch defaultChecked />
              </div>
            </Form.Item>

            <Form.Item name="includeMultipleChoice" valuePropName="checked" initialValue={true}>
              <div className="modal-switch-row">
                <span className="modal-label">Tr·∫Øc nghi·ªám</span>
                <Switch defaultChecked />
              </div>
            </Form.Item>
          </Form>

          <div className="modal-btn-row">
            <Button 
              className="modal-btn"
              type="primary"
              size="large"
              loading={creatingExam}
              onClick={handleCreateAIExam}
              style={{
                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                border: 'none',
                height: '50px',
                fontSize: '16px',
                fontWeight: 'bold'
              }}
            >
              {creatingExam ? (
                <>ü§ñ AI ƒëang t·∫°o ƒë·ªÅ thi...</>
              ) : (
                <>üöÄ T·∫°o ƒë·ªÅ thi b·∫±ng AI</>
              )}
            </Button>
            
            <Button 
              className="modal-btn"
              size="large"
              onClick={() => navigate("/thiMau")}
              style={{
                marginTop: '10px',
                background: 'transparent',
                border: '2px solid #fff',
                color: '#fff',
                height: '45px'
              }}
            >
              üìã Ho·∫∑c ch·ªçn ƒë·ªÅ c√≥ s·∫µn
            </Button>
          </div>
        </div>
      </Modal>
    </div>
  );
};

export default Home;
