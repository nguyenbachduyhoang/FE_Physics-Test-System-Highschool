import React, { useState, useEffect } from "react";
import LayoutContent from "../../components/layoutContent";
import "./index.scss";
import { FaBookOpen, FaPlay, FaGraduationCap, FaMapMarkerAlt, FaEye } from "react-icons/fa";
import { Radio, Modal, Spin, Alert } from "antd";
import { useNavigate, useLocation } from "react-router-dom";
import { analyticsService } from "../../services";
import toast from "react-hot-toast";

const ThiMau = () => {
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [selectedTest, setSelectedTest] = useState(null);
  const [loading, setLoading] = useState(true);
  const [tests, setTests] = useState([]);
  const [loadingQuestions, setLoadingQuestions] = useState(false);
  const navigate = useNavigate();
  const location = useLocation();

  useEffect(() => {
    loadFilteredExams();
  }, [location.search]);

  const loadFilteredExams = async () => {
    try {
      setLoading(true);
      
      const searchParams = new URLSearchParams(location.search);
      const filters = {
        grade: searchParams.get('grade') || '',
        subject: searchParams.get('subject') || '',
        difficulty: searchParams.get('difficulty') || ''
      };

      // B∆Ø·ªöC 2: Th·ª≠ API debug tr∆∞·ªõc
      let examsData = await analyticsService.getSampleExams(filters);

      // B∆Ø·ªöC 3: N·∫øu debug API kh√¥ng c√≥ d·ªØ li·ªáu, th·ª≠ API g·ªëc
      if (!examsData || examsData.length === 0) {
        examsData = await analyticsService.getSampleExams(filters);
      }

      // B∆Ø·ªöC 4: N·∫øu v·∫´n kh√¥ng c√≥ d·ªØ li·ªáu, th·ª≠ l·∫•y t·∫•t c·∫£ (kh√¥ng filter)
      if (!examsData || examsData.length === 0) {
        examsData = await analyticsService.getSampleExams({});
      }
      
      const transformedTests = (examsData || []).map(exam => ({
        id: exam.examId,
        title: exam.examName,
        subject: exam.description || "ƒê·ªÅ thi v·∫≠t l√Ω",
        class: exam.grade || "10-12",
        topic: exam.subject || "V·∫≠t l√Ω", 
        difficulty: exam.difficulty || "Trung b√¨nh",
        attempts: 0,
        stats: [
          { label: "C√¢u h·ªèi", value: exam.questionCount || 0 },
          { label: "Ph√∫t", value: exam.duration || 45 },
          { label: "ƒêi·ªÉm TB", value: 0 },
          { label: "L∆∞·ª£t l√†m", value: 0 },
        ],
        questions: [] // Will be loaded when needed
      }));
      
      setTests(transformedTests);
    } catch (err) {
      console.error('Load filtered exams error:', err);
      toast.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë·ªÅ thi');
      // Fallback to empty list
      setTests([]);
    } finally {
      setLoading(false);
    }
  };

  const handleViewDetails = async (test) => {
    setSelectedTest({ ...test, questions: [] });
    setIsModalVisible(true);
    setLoadingQuestions(true);

    try {
      const examDetails = await analyticsService.getExamById(test.id);
      console.log('üîç SampleTest - API Response:', examDetails);
      
      if (examDetails && examDetails.questions && examDetails.questions.length > 0) {
        console.log('‚úÖ SampleTest - Found questions:', examDetails.questions.length);
        
        // Map API response to component format
        const mappedQuestions = examDetails.questions.map((examQuestion, index) => {
          console.log(`üìù Question ${index + 1}:`, examQuestion.question);
          return {
            id: index + 1,
            questionText: examQuestion.question?.questionText || 'C√¢u h·ªèi kh√¥ng c√≥ n·ªôi dung',
            options: examQuestion.question?.answerChoices?.map(choice => 
              `${choice.choiceLabel}. ${choice.choiceText}`
            ) || [],
            correctAnswer: examQuestion.question?.answerChoices?.find(choice => 
              choice.isCorrect
            )?.choiceLabel || 'A'
          };
        });
        
        console.log('üéØ SampleTest - Mapped questions:', mappedQuestions);
        
        setSelectedTest(prev => ({
          ...prev,
          questions: mappedQuestions
        }));
      } else {
        console.log('‚ö†Ô∏è SampleTest - No questions found, using demo');
        // Fallback: Demo questions n·∫øu API kh√¥ng c√≥ data
        const demoQuestions = [
          {
            id: 1,
            questionText: "ƒê·ªãnh lu·∫≠t I Newton ph√°t bi·ªÉu v·ªÅ:",
            options: [
              "A. Tr·∫°ng th√°i c√¢n b·∫±ng c·ªßa v·∫≠t",
              "B. M·ªëi quan h·ªá gi·ªØa l·ª±c v√† gia t·ªëc", 
              "C. ƒê·ªãnh lu·∫≠t t√°c d·ª•ng v√† ph·∫£n t√°c d·ª•ng",
              "D. ƒê·ªãnh lu·∫≠t b·∫£o to√†n ƒë·ªông l∆∞·ª£ng"
            ],
            correctAnswer: "A"
          },
          {
            id: 2, 
            questionText: "Trong chuy·ªÉn ƒë·ªông th·∫≥ng ƒë·ªÅu, v·∫≠n t·ªëc c·ªßa v·∫≠t:",
            options: [
              "A. TƒÉng theo th·ªùi gian",
              "B. Gi·∫£m theo th·ªùi gian",
              "C. Kh√¥ng ƒë·ªïi theo th·ªùi gian", 
              "D. B·∫±ng 0"
            ],
            correctAnswer: "C"
          },
          {
            id: 3,
            questionText: "ƒê∆°n v·ªã c·ªßa gia t·ªëc trong h·ªá SI l√†:",
            options: [
              "A. m/s",
              "B. m/s¬≤",
              "C. kg.m/s¬≤", 
              "D. N"
            ],
            correctAnswer: "B"
          }
        ];
        
        setSelectedTest(prev => ({
          ...prev,
          questions: demoQuestions
        }));
      }
    } catch (error) {
      console.error('Error loading exam details:', error);
      toast.error('Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt ƒë·ªÅ thi');
    } finally {
      setLoadingQuestions(false);
    }
  };

  const handleModalClose = () => {
    setIsModalVisible(false);
    setSelectedTest(null);
  };

  return (
    <>
      <LayoutContent
        layoutType={1}
        content1={
          <div>
            <h1 className="title">Danh S√°ch ƒê·ªÅ Thi M·∫´u</h1>
            {loading ? (
              <div style={{ textAlign: 'center', padding: '50px' }}>
                <Spin size="large" />
                <p style={{ marginTop: '16px' }}>ƒêang t·∫£i ƒë·ªÅ thi...</p>
              </div>
            ) : tests.length === 0 ? (
              <Alert
                message="Kh√¥ng t√¨m th·∫•y ƒë·ªÅ thi"
                description="Kh√¥ng c√≥ ƒë·ªÅ thi n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i v·ªõi ƒëi·ªÅu ki·ªán kh√°c."
                type="info"
                showIcon
                style={{ marginTop: '20px' }}
              />
            ) : (
              <div className="test-list">
                {tests.map((test) => (
                <div key={test.id} className="test-card custom-layout">
                  <div className="test-card-header">
                    <div className="test-card-title">{test.title}</div>
                    <div className="test-card-meta">
                      <span>
                        <FaBookOpen /> Ch·ªß ƒë·ªÅ: {test.topic}
                      </span>
                      <span>
                        <FaGraduationCap /> L·ªõp: {test.class}
                      </span>
                      <span>
                        <FaMapMarkerAlt /> ƒê√¥Ã£ khoÃÅ: {test.difficulty}
                      </span>
                    </div>
                  </div>
                  <div className="test-card-content">
                    <div className="test-card-main">
                      <div className="test-card-section">
                        <div className="section-title">
                          <span role="img" aria-label="book">
                            üßë‚Äçüè´
                          </span>{" "}
                          Ch·ªß ƒë·ªÅ ch√≠nh
                        </div>
                        <div className="section-desc">{test.subject}</div>
                      </div>
                      <div className="test-card-section note-section">
                        <div
                          className="section-title"
                        >
                          <span role="img" aria-label="note">
                            üìù
                          </span>{" "}
                          Ghi ch√∫ ƒë·ªÅ thi
                        </div>
                        <div className="section-desc">
                          ƒê·ªÅ thi ph√π h·ª£p cho h·ªçc sinh √¥n t·∫≠p cu·ªëi k·ª≥, b√°m s√°t
                          ch∆∞∆°ng tr√¨nh SGK.
                        </div>
                      </div>
                    </div>
                    <div className="test-card-side">
                      <div className="test-card-stats">
                        {[0, 1, 2, 3].map((idx) => (
                          <div className="stat-box" key={idx}>
                            <div className="stat-value">
                              {test.stats && test.stats[idx]
                                ? test.stats[idx].value
                                : "--"}
                            </div>
                            <div className="stat-label">
                              {test.stats && test.stats[idx]
                                ? test.stats[idx].label
                                : ""}
                            </div>
                          </div>
                        ))}
                      </div>
                      <div className="test-card-actions">
                        <button
                          className="btn btn-details"
                          onClick={() => handleViewDetails(test)}
                        >
                          <FaEye /> Xem tr∆∞∆°ÃÅc
                        </button>
                        <button
                          className="btn btn-take-test"
                          onClick={() => navigate(`/quiz/${test.id}`)}
                        >
                          <FaPlay /> L√†m b√†i
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
              </div>
            )}
          </div>
        }
      />

      <Modal
        title={
          <span style={{ fontSize: 24, color: "orange", fontWeight: 700 }}>
            {selectedTest?.title}
          </span>
        }
        open={isModalVisible}
        onCancel={handleModalClose}
        footer={null}
        width={950}
        centered
        styles={{ body: { maxHeight: "80vh", overflowY: "auto", padding: 4 } }}
      >
        <div className="modal-subject">{selectedTest?.subject}</div>
        {loadingQuestions ? (
          <div style={{ textAlign: 'center', padding: '50px' }}>
            <Spin size="large" />
            <p style={{ marginTop: '16px' }}>ƒêang t·∫£i chi ti·∫øt ƒë·ªÅ thi...</p>
          </div>
        ) : (
          selectedTest?.questions?.map((question) => (
            <div key={question.id} className="question-card">
              <h3>{`C√¢u ${question.id}: ${question.questionText}`}</h3>
              <p>Ch·ªçn ƒë√°p √°n ƒë√∫ng:</p>
              <div className="options-group">
                <Radio.Group
                  style={{ display: "flex", flexDirection: "column", gap: 8 }}
                >
                  {(question.options || []).map((option, index) => (
                    <Radio key={index} value={option}>
                      {option}
                    </Radio>
                  ))}
                </Radio.Group>
              </div>
            </div>
          ))
        )}
      </Modal>
    </>
  );
};

export default ThiMau;
